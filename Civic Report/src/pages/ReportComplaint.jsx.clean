import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { Camera, MapPin, X, AlertTriangle } from 'lucide-react';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Components
import Navbar from '../components/Navbar';
import SpinnerModal from '../components/SpinnerModal';
import { Button } from '../components/ui/button';
import { Textarea } from '../components/ui/textarea';

// Utils
import { auth } from '../utils/Firebase';
import { createComplaint, isOfficial } from '../utils/FirebaseFunctions';
import { Statuses } from '../utils/enums';

const ReportComplaint = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [location, setLocation] = useState({
    name: '',
    lat: null,
    lng: null,
  });
  const [formData, setFormData] = useState({
    reason: '',
    description: '',
    media: null,
    mediaPreview: '',
  });
  const [errors, setErrors] = useState({});
  const fileInputRef = useRef(null);
  const navigate = useNavigate();

  // Check authentication on mount
  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged(async (user) => {
      if (!user) {
        navigate('/login');
        return;
      }
      
      const isUserOfficial = await isOfficial(user.uid);
      if (!isUserOfficial) {
        toast.error('Only authorized officials can report complaints');
        navigate('/');
      }
    });

    return () => unsubscribe();
  }, [navigate]);

  // Handle location detection
  const handleDetectLocation = () => {
    if (!navigator.geolocation) {
      toast.error('Geolocation is not supported by your browser');
      return;
    }

    setIsLoading(true);
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        try {
          const { latitude, longitude } = position.coords;
          const response = await fetch(
            `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`
          );
          const data = await response.json();
          
          setLocation({
            name: data.display_name || 'Current Location',
            lat: latitude,
            lng: longitude,
          });
          
          toast.success('Location detected successfully');
        } catch (error) {
          console.error('Error getting location:', error);
          toast.error('Failed to detect location');
        } finally {
          setIsLoading(false);
        }
      },
      (error) => {
        console.error('Geolocation error:', error);
        toast.error('Please enable location access to continue');
        setIsLoading(false);
      }
    );
  };

  // Handle file upload
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    // Validate file type
    const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];
    if (!validTypes.includes(file.type)) {
      setErrors({
        ...errors,
        media: 'Please upload a valid image (JPEG, PNG, JPG)',
      });
      return;
    }

    // Validate file size (5MB max)
    if (file.size > 5 * 1024 * 1024) {
      setErrors({
        ...errors,
        media: 'Image size should be less than 5MB',
      });
      return;
    }

    // Create preview URL
    const reader = new FileReader();
    reader.onloadend = () => {
      setFormData({
        ...formData,
        media: file,
        mediaPreview: reader.result,
      });
      setErrors({ ...errors, media: '' });
    };
    reader.readAsDataURL(file);
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validate form
    const newErrors = {};
    if (!formData.reason.trim()) newErrors.reason = 'Please select a reason';
    if (!formData.description.trim()) newErrors.description = 'Please provide details';
    if (!location.lat || !location.lng) newErrors.location = 'Please detect location';
    
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      toast.error('Please fill in all required fields');
      return;
    }

    setIsLoading(true);
    
    try {
      const complaintData = {
        ...formData,
        location,
        status: Statuses.inProgress,
        timestamp: new Date().toISOString(),
        reportedBy: auth.currentUser.uid,
      };

      await createComplaint(complaintData, formData.media);
      
      toast.success('Complaint submitted successfully!');
      setTimeout(() => {
        navigate('/citizen-dashboard');
      }, 2000);
    } catch (error) {
      console.error('Error submitting complaint:', error);
      toast.error(error.message || 'Failed to submit complaint');
    } finally {
      setIsLoading(false);
    }
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        type: 'spring',
        stiffness: 100,
        damping: 15,
      },
    },
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Navbar />
      <SpinnerModal visible={isLoading} />
      <ToastContainer position="top-center" autoClose={3000} />
      
      <motion.div
        className="max-w-4xl mx-auto px-4 py-8"
        initial="hidden"
        animate="visible"
        variants={containerVariants}
      >
        <motion.div variants={itemVariants} className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Report an Issue</h1>
          <p className="text-gray-600">
            Help us improve the city by reporting traffic violations, road damages, or other issues.
          </p>
        </motion.div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Location Section */}
          <motion.div 
            variants={itemVariants}
            className="bg-white p-6 rounded-xl shadow-sm border border-gray-100"
          >
            <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <MapPin className="w-5 h-5 mr-2 text-primary-600" />
              Location
            </h2>
            
            <div className="space-y-4">
              <div className="flex items-center space-x-4">
                <div className="flex-1 p-3 border border-gray-200 rounded-lg bg-gray-50">
                  <p className="text-sm text-gray-500">Detected Location</p>
                  <p className="font-medium text-gray-900 truncate">
                    {location.name || 'Not detected'}
                  </p>
                </div>
                
                <Button
                  type="button"
                  onClick={handleDetectLocation}
                  disabled={isLoading}
                  className="whitespace-nowrap"
                  variant="outline"
                >
                  <MapPin className="w-4 h-4 mr-2" />
                  {location.lat ? 'Update Location' : 'Detect Location'}
                </Button>
              </div>
              
              {errors.location && (
                <p className="text-sm text-red-600 flex items-center">
                  <AlertTriangle className="w-4 h-4 mr-1" />
                  {errors.location}
                </p>
              )}
            </div>
          </motion.div>

          {/* Issue Details Section */}
          <motion.div 
            variants={itemVariants}
            className="bg-white p-6 rounded-xl shadow-sm border border-gray-100"
          >
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Issue Details</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Issue Type <span className="text-red-500">*</span>
                </label>
                <select
                  value={formData.reason}
                  onChange={(e) => {
                    setFormData({ ...formData, reason: e.target.value });
                    setErrors({ ...errors, reason: '' });
                  }}
                  className={`w-full p-2.5 border ${
                    errors.reason ? 'border-red-300' : 'border-gray-300'
                  } rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500`}
                >
                  <option value="">Select an issue type</option>
                  <option value="Traffic Violation">Traffic Violation</option>
                  <option value="Road Damage">Road Damage</option>
                  <option value="Illegal Parking">Illegal Parking</option>
                  <option value="Signal Issue">Traffic Signal Issue</option>
                  <option value="Other">Other</option>
                </select>
                {errors.reason && (
                  <p className="mt-1 text-sm text-red-600">{errors.reason}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Description <span className="text-red-500">*</span>
                </label>
                <Textarea
                  value={formData.description}
                  onChange={(e) => {
                    setFormData({ ...formData, description: e.target.value });
                    setErrors({ ...errors, description: '' });
                  }}
                  placeholder="Please provide details about the issue..."
                  className={`min-h-[120px] ${errors.description ? 'border-red-300' : ''}`}
                />
                {errors.description && (
                  <p className="mt-1 text-sm text-red-600">{errors.description}</p>
                )}
              </div>
            </div>
          </motion.div>

          {/* Media Upload Section */}
          <motion.div 
            variants={itemVariants}
            className="bg-white p-6 rounded-xl shadow-sm border border-gray-100"
          >
            <h2 className="text-lg font-semibold text-gray-900 mb-4">Add Photo (Optional)</h2>
            
            <div className="space-y-4">
              {formData.mediaPreview ? (
                <div className="relative group">
                  <img
                    src={formData.mediaPreview}
                    alt="Preview"
                    className="w-full h-48 object-cover rounded-lg border border-gray-200"
                  />
                  <button
                    type="button"
                    onClick={() => {
                      setFormData({ ...formData, media: null, mediaPreview: '' });
                      if (fileInputRef.current) fileInputRef.current.value = '';
                    }}
                    className="absolute top-2 right-2 p-1.5 bg-black/50 hover:bg-black/70 rounded-full text-white transition-colors"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              ) : (
                <div
                  onClick={() => fileInputRef.current?.click()}
                  className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:border-primary-400 transition-colors"
                >
                  <div className="flex flex-col items-center justify-center space-y-2">
                    <div className="p-3 bg-primary-50 rounded-full">
                      <Camera className="w-6 h-6 text-primary-600" />
                    </div>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium text-primary-600">Click to upload</span> or drag and drop
                    </p>
                    <p className="text-xs text-gray-500">
                      PNG, JPG (Max. 5MB)
                    </p>
                  </div>
                </div>
              )}
              
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                accept="image/*"
                className="hidden"
              />
              
              {errors.media && (
                <p className="text-sm text-red-600">{errors.media}</p>
              )}
            </div>
          </motion.div>

          {/* Submit Button */}
          <motion.div variants={itemVariants} className="flex justify-end">
            <Button
              type="submit"
              className="w-full sm:w-auto px-8 py-3 text-base font-medium"
              disabled={isLoading}
            >
              {isLoading ? 'Submitting...' : 'Submit Report'}
            </Button>
          </motion.div>
        </form>
      </motion.div>
    </div>
  );
};

export default ReportComplaint;
